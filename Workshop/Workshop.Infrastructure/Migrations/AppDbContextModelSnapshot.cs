// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Workshop.Infrastructure.Data;

#nullable disable

namespace Workshop.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Workshop.Core.Models.Cities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Goverments_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Goverments_Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Workshop.Core.Models.Classifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classifications");
                });

            modelBuilder.Entity("Workshop.Core.Models.CustomersStores", b =>
                {
                    b.Property<int>("Customer_Id")
                        .HasColumnType("int");

                    b.Property<int>("Store_Id")
                        .HasColumnType("int");

                    b.HasKey("Customer_Id", "Store_Id");

                    b.HasIndex("Store_Id");

                    b.ToTable("CustomersStores");
                });

            modelBuilder.Entity("Workshop.Core.Models.Goverments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Goverments");
                });

            modelBuilder.Entity("Workshop.Core.Models.InvItemsStores", b =>
                {
                    b.Property<int>("Items_Id")
                        .HasColumnType("int");

                    b.Property<int>("Stores_Id")
                        .HasColumnType("int");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<int>("Factor")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<double>("RecervedQuantiry")
                        .HasColumnType("float");

                    b.Property<int>("Units_Id")
                        .HasColumnType("int");

                    b.HasKey("Items_Id", "Stores_Id");

                    b.HasIndex("Stores_Id");

                    b.HasIndex("Units_Id");

                    b.ToTable("InvItemsStores");
                });

            modelBuilder.Entity("Workshop.Core.Models.Invoices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Custmer_Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<double>("NetPrice")
                        .HasColumnType("float");

                    b.Property<int>("Payment_Type")
                        .HasColumnType("int");

                    b.Property<int>("Transaction_Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Custmer_Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Workshop.Core.Models.InvoicesDetails", b =>
                {
                    b.Property<int>("Invoice_Id")
                        .HasColumnType("int");

                    b.Property<int>("Item_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Factor")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("Unit_Id")
                        .HasColumnType("int");

                    b.HasKey("Invoice_Id", "Item_Id");

                    b.HasIndex("Item_Id");

                    b.HasIndex("Unit_Id");

                    b.ToTable("InvoicesDetails");
                });

            modelBuilder.Entity("Workshop.Core.Models.Items", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MainGroups_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SubGroupsA_Id")
                        .HasColumnType("int");

                    b.Property<int>("SubGroupsB_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainGroups_Id");

                    b.HasIndex("SubGroupsA_Id");

                    b.HasIndex("SubGroupsB_Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Workshop.Core.Models.ItemsUnits", b =>
                {
                    b.Property<int>("Units_Id")
                        .HasColumnType("int");

                    b.Property<int>("Items_Id")
                        .HasColumnType("int");

                    b.Property<int>("Factor")
                        .HasColumnType("int");

                    b.HasKey("Units_Id", "Items_Id");

                    b.HasIndex("Items_Id");

                    b.ToTable("ItemsUnits");
                });

            modelBuilder.Entity("Workshop.Core.Models.MainGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MainGroups");
                });

            modelBuilder.Entity("Workshop.Core.Models.ShoppingCartItems", b =>
                {
                    b.Property<int>("Customer_Id")
                        .HasColumnType("int");

                    b.Property<int>("Item_Id")
                        .HasColumnType("int");

                    b.Property<int>("Store_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("Units_Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateeAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Customer_Id", "Item_Id", "Store_Id");

                    b.HasIndex("Item_Id");

                    b.HasIndex("Store_Id");

                    b.HasIndex("Units_Id");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Workshop.Core.Models.Stores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cities_Id")
                        .HasColumnType("int");

                    b.Property<int>("Goverments_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Zones_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cities_Id");

                    b.HasIndex("Goverments_Id");

                    b.HasIndex("Zones_Id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Workshop.Core.Models.SubGroupsA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MainGroups_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MainGroups_Id");

                    b.ToTable("SubGroupsA");
                });

            modelBuilder.Entity("Workshop.Core.Models.SubGroupsB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MainGroups_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubGroupsA_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainGroups_Id");

                    b.HasIndex("SubGroupsA_Id");

                    b.ToTable("SubGroupsB");
                });

            modelBuilder.Entity("Workshop.Core.Models.Units", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Workshop.Core.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Cities_Id")
                        .HasColumnType("int");

                    b.Property<int>("Classifications_Id")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Goverments_Id")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Zones_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cities_Id");

                    b.HasIndex("Classifications_Id");

                    b.HasIndex("Goverments_Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("Zones_Id");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Workshop.Core.Models.Zones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cities_Id")
                        .HasColumnType("int");

                    b.Property<int>("Goverments_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Cities_Id");

                    b.HasIndex("Goverments_Id");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Workshop.Core.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Workshop.Core.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workshop.Core.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Workshop.Core.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Workshop.Core.Models.Cities", b =>
                {
                    b.HasOne("Workshop.Core.Models.Goverments", "Goverments")
                        .WithMany("Cities")
                        .HasForeignKey("Goverments_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goverments");
                });

            modelBuilder.Entity("Workshop.Core.Models.CustomersStores", b =>
                {
                    b.HasOne("Workshop.Core.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("Customer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workshop.Core.Models.Stores", "Stores")
                        .WithMany()
                        .HasForeignKey("Store_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stores");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Workshop.Core.Models.InvItemsStores", b =>
                {
                    b.HasOne("Workshop.Core.Models.Items", "Items")
                        .WithMany("InvItemsStores")
                        .HasForeignKey("Items_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workshop.Core.Models.Stores", "Stores")
                        .WithMany("InvItemsStores")
                        .HasForeignKey("Stores_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workshop.Core.Models.Units", "Units")
                        .WithMany("InvItemsStores")
                        .HasForeignKey("Units_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Items");

                    b.Navigation("Stores");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("Workshop.Core.Models.Invoices", b =>
                {
                    b.HasOne("Workshop.Core.Models.Users", "Users")
                        .WithMany("invoices")
                        .HasForeignKey("Custmer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Workshop.Core.Models.InvoicesDetails", b =>
                {
                    b.HasOne("Workshop.Core.Models.Invoices", "Invoices")
                        .WithMany()
                        .HasForeignKey("Invoice_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workshop.Core.Models.Items", "Items")
                        .WithMany()
                        .HasForeignKey("Item_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workshop.Core.Models.Units", "Units")
                        .WithMany("InvoicesDetails")
                        .HasForeignKey("Unit_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoices");

                    b.Navigation("Items");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("Workshop.Core.Models.Items", b =>
                {
                    b.HasOne("Workshop.Core.Models.MainGroups", "MainGroups")
                        .WithMany("Items")
                        .HasForeignKey("MainGroups_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workshop.Core.Models.SubGroupsA", "SubGroupsA")
                        .WithMany("Items")
                        .HasForeignKey("SubGroupsA_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workshop.Core.Models.SubGroupsB", "SubGroupsB")
                        .WithMany("Items")
                        .HasForeignKey("SubGroupsB_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainGroups");

                    b.Navigation("SubGroupsA");

                    b.Navigation("SubGroupsB");
                });

            modelBuilder.Entity("Workshop.Core.Models.ItemsUnits", b =>
                {
                    b.HasOne("Workshop.Core.Models.Items", "Items")
                        .WithMany("ItemsUnits")
                        .HasForeignKey("Items_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workshop.Core.Models.Units", "Units")
                        .WithMany("ItemsUnits")
                        .HasForeignKey("Units_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Items");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("Workshop.Core.Models.ShoppingCartItems", b =>
                {
                    b.HasOne("Workshop.Core.Models.Users", "User")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("Customer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workshop.Core.Models.Items", "Items")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("Item_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workshop.Core.Models.Stores", "Stores")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("Store_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workshop.Core.Models.Units", "Units")
                        .WithMany("shoppingCartItems")
                        .HasForeignKey("Units_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Items");

                    b.Navigation("Stores");

                    b.Navigation("Units");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Workshop.Core.Models.Stores", b =>
                {
                    b.HasOne("Workshop.Core.Models.Cities", "Cities")
                        .WithMany("Stores")
                        .HasForeignKey("Cities_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workshop.Core.Models.Goverments", "Goverments")
                        .WithMany("Stores")
                        .HasForeignKey("Goverments_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workshop.Core.Models.Zones", "Zones")
                        .WithMany("Stores")
                        .HasForeignKey("Zones_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cities");

                    b.Navigation("Goverments");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Workshop.Core.Models.SubGroupsA", b =>
                {
                    b.HasOne("Workshop.Core.Models.MainGroups", "MainGroups")
                        .WithMany("SubGroupsA")
                        .HasForeignKey("MainGroups_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainGroups");
                });

            modelBuilder.Entity("Workshop.Core.Models.SubGroupsB", b =>
                {
                    b.HasOne("Workshop.Core.Models.MainGroups", "MainGroups")
                        .WithMany("SubGroupsB")
                        .HasForeignKey("MainGroups_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workshop.Core.Models.SubGroupsA", "SubGroupsA")
                        .WithMany("SubGroupsB")
                        .HasForeignKey("SubGroupsA_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainGroups");

                    b.Navigation("SubGroupsA");
                });

            modelBuilder.Entity("Workshop.Core.Models.Users", b =>
                {
                    b.HasOne("Workshop.Core.Models.Cities", "Cities")
                        .WithMany("Users")
                        .HasForeignKey("Cities_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workshop.Core.Models.Classifications", "Classifications")
                        .WithMany("Users")
                        .HasForeignKey("Classifications_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workshop.Core.Models.Goverments", "Goverments")
                        .WithMany("Users")
                        .HasForeignKey("Goverments_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workshop.Core.Models.Zones", "Zones")
                        .WithMany("Users")
                        .HasForeignKey("Zones_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cities");

                    b.Navigation("Classifications");

                    b.Navigation("Goverments");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Workshop.Core.Models.Zones", b =>
                {
                    b.HasOne("Workshop.Core.Models.Cities", "Cities")
                        .WithMany("Zones")
                        .HasForeignKey("Cities_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workshop.Core.Models.Goverments", "Goverments")
                        .WithMany("Zones")
                        .HasForeignKey("Goverments_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cities");

                    b.Navigation("Goverments");
                });

            modelBuilder.Entity("Workshop.Core.Models.Cities", b =>
                {
                    b.Navigation("Stores");

                    b.Navigation("Users");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Workshop.Core.Models.Classifications", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Workshop.Core.Models.Goverments", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Stores");

                    b.Navigation("Users");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Workshop.Core.Models.Items", b =>
                {
                    b.Navigation("InvItemsStores");

                    b.Navigation("ItemsUnits");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("Workshop.Core.Models.MainGroups", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("SubGroupsA");

                    b.Navigation("SubGroupsB");
                });

            modelBuilder.Entity("Workshop.Core.Models.Stores", b =>
                {
                    b.Navigation("InvItemsStores");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("Workshop.Core.Models.SubGroupsA", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("SubGroupsB");
                });

            modelBuilder.Entity("Workshop.Core.Models.SubGroupsB", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Workshop.Core.Models.Units", b =>
                {
                    b.Navigation("InvItemsStores");

                    b.Navigation("InvoicesDetails");

                    b.Navigation("ItemsUnits");

                    b.Navigation("shoppingCartItems");
                });

            modelBuilder.Entity("Workshop.Core.Models.Users", b =>
                {
                    b.Navigation("ShoppingCartItems");

                    b.Navigation("invoices");
                });

            modelBuilder.Entity("Workshop.Core.Models.Zones", b =>
                {
                    b.Navigation("Stores");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
